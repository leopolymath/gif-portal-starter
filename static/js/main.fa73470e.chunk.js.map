{"version":3,"sources":["assets/twitter-logo.svg","idl.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["idl","version","name","instructions","accounts","isMut","isSigner","args","type","kind","fields","vec","defined","types","metadata","address","TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","tweetsList","setTweetsList","connectWallet","a","window","solana","connect","response","console","log","publicKey","toString","getProvider","connection","Connection","Provider","checkIfWalletIsConnected","isPhantom","onlyIfTrusted","alert","error","getTweetsList","provider","program","Program","account","fetch","gifList","useEffect","addEventListener","event","className","onClick","sendTweet","length","rpc","addGif","user","wallet","createGifAccount","startStuffOff","systemProgram","programId","signers","placeholder","value","onChange","target","map","tweet","index","tweetId","gifLink","renderConnectedContainer","alt","src","twitterLogo","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa73470e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","export const idl = {\n  version: \"0.0.0\",\n  name: \"twitterportal\",\n  instructions: [\n    {\n      name: \"startStuffOff\",\n      accounts: [\n        {\n          name: \"baseAccount\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"addGif\",\n      accounts: [\n        {\n          name: \"baseAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"gifLink\",\n          type: \"string\",\n        },\n      ],\n    },\n  ],\n  accounts: [\n    {\n      name: \"BaseAccount\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"totalGifs\",\n            type: \"u64\",\n          },\n          {\n            name: \"gifList\",\n            type: {\n              vec: {\n                defined: \"ItemStruct\",\n              },\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"ItemStruct\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"gifLink\",\n            type: \"string\",\n          },\n          {\n            name: \"userAddress\",\n            type: \"publicKey\",\n          },\n        ],\n      },\n    },\n  ],\n  metadata: {\n    address: \"CHiAY4vVe5TboHwBiAYz6CFzWzAtV1eumNHjD9Ac91GF\",\n  },\n};\n","import React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport \"./App.css\";\nimport { idl } from \"./idl\";\nimport kp from \"./keypair.json\";\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_TWEETS = [\n  \"1455685018928418816\",\n  \"1457325530404073476\",\n  \"1457305888872669185\",\n  \"1457184031536209924\",\n];\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App: React.FC = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [tweetsList, setTweetsList] = useState<{ gifLink: string }[] | null>(\n    null\n  );\n  const connectWallet = async () => {\n    // @ts-ignore\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const getProvider = () => {\n    // @ts-ignore\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      // @ts-ignore\n      window.solana,\n      // @ts-ignore\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      // @ts-ignore\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet 👻\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    const onInputChange = (event: any) => {\n      const { value } = event.target;\n      setInputValue(value);\n    };\n\n    const sendTweet = async () => {\n      if (inputValue.length === 0) {\n        console.log(\"Empty input. Try again.\");\n      }\n\n      console.log(\"Tweet link:\", inputValue);\n      try {\n        const provider = getProvider();\n        // @ts-ignore\n        const program = new Program(idl, programID, provider);\n\n        await program.rpc.addGif(inputValue, {\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n          },\n        });\n        console.log(\"GIF successfully sent to program\", inputValue);\n\n        await getTweetsList();\n      } catch (error) {\n        console.log(\"Error sending GIF:\", error);\n      }\n    };\n\n    const createGifAccount = async () => {\n      try {\n        const provider = getProvider();\n        // @ts-ignore\n        const program = new Program(idl, programID, provider);\n        console.log(\"ping\");\n        await program.rpc.startStuffOff({\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          },\n          signers: [baseAccount],\n        });\n        console.log(\n          \"Created a new BaseAccount w/ address:\",\n          baseAccount.publicKey.toString()\n        );\n        await getTweetsList();\n      } catch (error) {\n        console.log(\"Error creating BaseAccount account:\", error);\n      }\n    };\n\n    if (tweetsList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"connected-container\">\n        {/* Go ahead and add this input and button to start */}\n        <input\n          type=\"text\"\n          placeholder=\"Enter your tweet id!\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button className=\"cta-button submit-gif-button\" onClick={sendTweet}>\n          Submit\n        </button>\n        <div className=\"gif-grid\">\n          {tweetsList.map((tweet, index) => (\n            <div key={`${index}-${tweet.gifLink}`}>\n              <TwitterTweetEmbed tweetId={tweet.gifLink} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const getTweetsList = async () => {\n    try {\n      const provider = getProvider();\n      console.log(\"const provider = getProvider();\");\n      // @ts-ignore\n      const program = new Program(idl, programID, provider);\n      console.log(\"after new Program(idl, programID, provider);\");\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setTweetsList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setTweetsList(null);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"load\", async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      getTweetsList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">🐦 Solana Tweets collection</p>\n          <p className=\"sub-text\">\n            From Leo: view your tweets collection in the metaverse ✨\n          </p>\n          {/* Render your connect to wallet button right here */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}